---
# tasks file for 42_ansible

- name: Stop Any Old Instances of Docker Registy Container
  shell: 
    cmd: podman stop `sudo podman ps -a| grep mirror-registry| awk '{ print $1 }'`
  ignore_errors: true 
- name: Remove Any Old Instances of Docker Registy Container
  shell: 
    cmd: podman rm `sudo podman ps -a| grep mirror-registry| awk '{ print $1 }'`
  ignore_errors: true
- name: Remove Old Instance of /opt/registry directory if it exists from previous run
  shell:
    cmd: rm -rf /opt/registry
    
- name: install the latest version of httpd-tools
  yum:
    name: httpd-tools
    state: latest

- name: install the latest version of podman
  yum:
    name: podman
    state: latest

- name: install pyOpenSSL
  yum:
    name: pyOpenSSL
    state: latest

- name: Create /opt/registry/auth Directory
  file:
    path: /opt/registry/auth
    state: directory
    mode: 0755
    owner: root

- name: Create /opt/registry/certs Directory
  file:
    path: /opt/registry/certs
    state: directory
    mode: 0755
    owner: root

- name: Create /opt/registry/data Directory
  file:
    path: /opt/registry/data
    state: directory
    mode: 0755
    owner: root

- name: Generate an OpenSSL private key for Registry
  openssl_privatekey:
    path: /opt/registry/certs/domain.key
    size: 4096

- name: Generate an OpenSSL private key for CA
  openssl_privatekey:
    path: /opt/registry/certs/ca.key
    size: 4096

- name: Generate an OpenSSL Certificate Signing Request with Subject information for CA
  openssl_csr:
    path: /opt/registry/certs/ca.csr
    privatekey_path: /opt/registry/certs/ca.key
    country_name: "{{ CSR_country_name }}"
    organizational_unit_name: "{{ CSR_organizational_unit_name }}"
    organization_name: "{{ CSR_organization_name }}"
    email_address: "{{ CSR_email_address }}"
    common_name: "Docker-Registry-CA"
    basic_constraints: 
      - CA:TRUE

- name: Generate a Self Signed OpenSSL certificate for CA
  openssl_certificate:
    path: /opt/registry/certs/ca.crt
    privatekey_path: /opt/registry/certs/ca.key
    csr_path: /opt/registry/certs/ca.csr
    provider: selfsigned
    key_usage:
      - critical
      - keyCertSign
      - cRLSign
    key_usage_strict: true

- name: Generate an OpenSSL Certificate Signing Request for Docker Registry
  openssl_csr:
    path: /opt/registry/certs/domain.csr
    privatekey_path: /opt/registry/certs/domain.key
    country_name: "{{ CSR_country_name }}"
    organizational_unit_name: "{{ CSR_organizational_unit_name }}"
    organization_name: "{{ CSR_organization_name }}"
    email_address: "{{ CSR_email_address }}"
    common_name: "{{ local_docker_registry_url }}"
    state_or_province_name: "{{ CSR_state }}"
    locality_name: "{{ CSR_locality }}"

- name: Generate an OpenSSL certificate Signed by Docker Registry CA
  openssl_certificate:
    path: /opt/registry/certs/domain.crt
    csr_path: /opt/registry/certs/domain.csr
    ownca_path: /opt/registry/certs/ca.crt
    ownca_privatekey_path: /opt/registry/certs/ca.key
    provider: ownca

#- name: Create htpasswd username and password for 4.2 Install Registry Mirror
#  htpasswd:
#    path: /opt/registry/auth/htpasswd
#    name: "{{ htpasswd_docker_user }}"
#    password: "{{ htpasswd_docker_password }}"
#    #crypt_scheme: md5_crypt

- name: Create htpasswd username and password for 4.2 Install Registry Mirror
  shell:
    cmd: htpasswd -bBc /opt/registry/auth/htpasswd {{ htpasswd_docker_user }} {{ htpasswd_docker_password }}

- name: Run Registry Container
  shell:
    cmd: podman run --name mirror-registry -p 5000:5000 -v /opt/registry/data:/var/lib/registry:z -v /opt/registry/auth:/auth:z -e "REGISTRY_AUTH=htpasswd" -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd -v /opt/registry/certs:/certs:z -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key -d docker.io/library/registry:2
  become: yes
  become_user: root
  become_method: sudo

#- name: Enabling Port 5000 on Public Zone
#  firewalld:
#    port: 5000/tcp
#    permanent: yes
#    zone: public
#    immediate: yes
#    state: enabled

#- name: Enabling Port 5000 on Internal Zone
#  firewalld:
#    port: 5000/tcp
#    permanent: yes
#    zone: internal
#    state: enabled
#    immediate: yes

- name: Copy CA Cert to Anchors Directory
  shell:
    cmd: cp /opt/registry/certs/ca.crt /etc/pki/ca-trust/source/anchors/ca.crt

- name: Trust the CA of the Self-Signed Cert
  shell:
    cmd: update-ca-trust extract
    
#- name: Append domain.crt to tls-ca-bundle.pem  
#  shell:
#    cmd: cat /opt/registry/certs/domain.crt >> /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
